#📧 Mailing List Microservice

A lightweight microservice for managing mailing list subscriptions, confirmations, and soft-deletes. Built in Go with SQLite, designed for modular integration into broader DevOps or cloud orchestration workflows.

---

## Features

- ✅ Add, update, confirm, or soft-delete email subscriptions
- 📄 Paginated email list querying
- 🗄️ SQLite-backed persistence with auto schema setup
- 🌐 RESTful API for easy integration
- 📊 Supports JSON format for API requests and responses
- ⚡ Protocol Buffers and gRPC support

---

## 🛠️ Tech Stack

- **Go** (Golang) 1.22.2+
- **SQLite** (via `github.com/mattn/go-sqlite3`)
- **JSON API** for RESTful endpoints
- **Protocol Buffers** for efficient serialization
- **gRPC** for high-performance RPC

---

## 📁 Project Structure

```
.
├── mdb/            # Database layer with SQLite operations
│   └── mdb.go      # Core database functionality
├── jsonapi/        # REST API implementation
│   └── jsonapi.go  # HTTP handlers for JSON endpoints
├── go.mod          # Go module definition
├── go.sum          # Go module checksums
└── README.md       # Project documentation
```

---

## 📋 Prerequisites

- Go 1.22.2 or higher
- GCC compiler (for SQLite)
- Protocol Buffers compiler (for gRPC)

---

## 🚀 Installation

### 1. Clone the Repository

```bash
git clone https://github.com/madou9/MailingList-Microservice.git
cd mailinglist-microservice
```

### 2. Install Protocol Buffers Compiler

Install the `protoc` tool by following the official instructions:

- [Official protoc installation guide](https://grpc.io/docs/protoc-installation/)

Alternatively, download a pre-built binary from:

- [Protocol Buffers releases](https://github.com/protocolbuffers/protobuf/releases)

Make sure to place the extracted binary somewhere in your `$PATH`.

### 3. Install Go Protobuf Codegen Tools

```bash
go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
```

### ⚙️ Code Generation (Protocol Buffers & gRPC)

protoc --go_out=. --go_opt=paths=source_relative \
 --go-grpc_out=. --go-grpc_opt=paths=source_relative \
 Proto/mail.proto

### 4. Install Dependencies

```bash
go mod download
```

### 5. Build the Project

```bash
go build -o mailinglist .
```

---

## ⚡ Quick Start

```bash
# Clone and run in 3 commands
git clone https://github.com/madou9/MailingList-Microservice.git
cd mailinglist-microservice
go run main.go

# Test the API
curl http://localhost:8080/emails
```

---

## 🔍 Usage

### Running the Service

```bash
./mailinglist
```

The service will start and listen for connections on the configured port.

### Environment Variables

| Variable  | Description               | Default            |
| --------- | ------------------------- | ------------------ |
| `PORT`    | HTTP server port          | `8080`             |
| `DB_PATH` | SQLite database file path | `./mailinglist.db` |

---

### Example Request

```bash
curl -X POST http://localhost:8080/emails \
  -H "Content-Type: application/json" \
  -d '{"email": "user@example.com"}'
```

---

## 💻 Development

### Testing

Run the test suite:

```bash
go test ./...
```

### Code Generation

After modifying Protocol Buffer definitions, regenerate the code:

```bash
protoc --go_out=. --go-grpc_out=. proto/*.proto
```

## 👥 Contributing

We welcome contributions! Here's how to get started:

1. **Fork** the repository
2. **Create** your feature branch: `git checkout -b feature/amazing-feature`
3. **Commit** your changes: `git commit -m 'Add some amazing feature'`
4. **Push** to the branch: `git push origin feature/amazing-feature`
5. **Open** a Pull Request

### Guidelines

- Write clear, concise commit messages
- Add tests for new features
- Update documentation as needed
- Follow Go coding standards

---

## 🔗 Links

- [Go Documentation](https://golang.org/doc/)
- [SQLite Documentation](https://sqlite.org/docs.html)
- [gRPC Documentation](https://grpc.io/docs/)
- [Protocol Buffers Documentation](https://developers.google.com/protocol-buffers)

---
